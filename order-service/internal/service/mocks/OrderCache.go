// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "order-service/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// OrderCache is an autogenerated mock type for the OrderCache type
type OrderCache struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *OrderCache) Get(_a0 string) (*models.Order, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Order
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*models.Order, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LoadBatch provides a mock function with given fields: _a0
func (_m *OrderCache) LoadBatch(_a0 []*models.Order) {
	_m.Called(_a0)
}

// Set provides a mock function with given fields: _a0
func (_m *OrderCache) Set(_a0 *models.Order) {
	_m.Called(_a0)
}

// NewOrderCache creates a new instance of OrderCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderCache {
	mock := &OrderCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
